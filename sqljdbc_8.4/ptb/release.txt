Informações sobre a versão
Microsoft JDBC Driver 8.4 para SQL Server
Agosto de 2020

------------
INTRODUÇÃO
------------
Este arquivo contém as últimas novidades e outras informações importantes que complementam a documentação do Microsoft JDBC 
Documentação do Driver 8.4 para SQL Server. Você deve ler este arquivo inteiramente antes de instalar 
o driver JDBC.

Seus comentários são muito importantes para nós e procuraremos responder a eles de maneira 
oportuna. Para obter informações sobre como fornecer comentários usando os blogs do driver JDBC e os fóruns online, 
confira a página do Microsoft JDBC Driver 8.4 para SQL Server em https://aka.ms/mssql-jdbc-feedback


------------
INSTALAÇÃO
------------
As instruções de instalação do driver JDBC estão no arquivo install.txt. Consulte esse arquivo para 
obter informações sobre a instalação do driver JDBC nos sistemas operacionais Windows, Linux e macOS.


---------------------------
SISTEMAS OPERACIONAIS COMPATÍVEIS
---------------------------
Os sistemas operacionais compatíveis com o Microsoft JDBC Driver 8.4 para SQL Server são:
  Windows Server 2012
  Windows Server 2012 R2
  Windows Server 2016
  Windows Server 2019
  Windows 8.1
  Windows 10
  Linux
  macOS

A lista acima é um exemplo de alguns sistemas operacionais compatíveis. O driver JDBC foi desenvolvido 
para funcionar em qualquer sistema operacional que dê suporte ao uso de uma JVM (Máquina Virtual Java). 

No entanto, a compatibilidade e o suporte foram testados somente nos sistemas operacionais mais recentes do Linux e do macOS (Ubuntu 20.04, Ubuntu 18.04,
 CentOS 7, SUSE 12, macOS 10.15).


-----------------------
VERSÕES DO JAVA COM SUPORTE
-----------------------
O Microsoft JDBC Driver 8.4 para SQL Server foi testado e é compatível com as versões mais recentes dos builds do JDK (Kit 
de Desenvolvimento Java) do Open JDK e Zulu em sistemas operacionais com suporte, conforme mencionado acima.
As versões de família abaixo da Biblioteca do Sistema JRE (Java Runtime Environment) têm suporte:

  ----------------------------------------------------------------------
  Versão da Família JRE | Driver JAR para Suporte Máximo
  ----------------------------------------------------------------------
  8+                 | mssql-jdbc-8.4.1.jre8.jar
  11+                | mssql-jdbc-8.4.1.jre11.jar
  14+                | mssql-jdbc-8.4.1.jre14.jar


----------------
CONTEÚDO DA VERSÃO
----------------
O arquivo zip ou tar do Microsoft JDBC Driver 8.4 para SQL Server desempacota os seguintes arquivos 
nos locais especificados, relativo ao diretório de instalação selecionado:

<diretório de instalação>\sqljdbc_<versão>\<idioma>\install.txt
<diretório de instalação>\sqljdbc_<versão>\<idioma>\release.txt
<diretório de instalação>\sqljdbc_<versão>\<idioma>\license.txt
<diretório de instalação>\sqljdbc_<versão>\<idioma>\thirdpartynotices.txt
<diretório de instalação>\sqljdbc_<versão>\<idioma>\mssql-jdbc-8.4.1.jre8.jar
<diretório de instalação>\sqljdbc_<versão>\<idioma>\mssql-jdbc-8.4.1.jre11.jar
<diretório de instalação>\sqljdbc_<versão>\<idioma>\mssql-jdbc-8.4.1.jre14.jar
<diretório de instalação>\sqljdbc_<versão>\<idioma>\auth\x86\mssql-jdbc_auth-8.4.1.x86.dll
<diretório de instalação>\sqljdbc_<versão>\<idioma>\auth\x64\mssql-jdbc_auth-8.4.1.x64.dll
<diretório de instalação>\sqljdbc_<versão>\<idioma>\samples\<arquivos de exemplos...>
<diretório de instalação>\sqljdbc_<versão>\<idioma>\xa\xa_install.sql
<diretório de instalação>\sqljdbc_<versão>\<idioma>\xa\x86\sqljdbc_xa.dll
<diretório de instalação>\sqljdbc_<versão>\<idioma>\xa\x64\sqljdbc_xa.dll

Para obter informações detalhadas sobre cada componente, veja a documentação online,
Documentação do Microsoft JDBC Driver para SQL Server: https://aka.ms/mssql-jdbc


-------------
DOCUMENTAÇÃO
-------------
Essas informações de versão, as instruções de instalação e os termos de licença estão incluídos neste pacote. 
Todas as outras documentações podem ser encontradas online.

Observe que os arquivos de ajuda offline foram descontinuados. 


---------
ARQUIVOS JAR
---------
Para compatibilidade com versões anteriores e possíveis cenários de atualização, o JDBC Driver 8.4 inclui 
três bibliotecas de classes JAR em cada pacote de instalação:
	mssql-jdbc-8.4.1.jre8.jar
	mssql-jdbc-8.4.1.jre11.jar
	mssql-jdbc-8.4.1.jre14.jar


----------------------
ARQUIVOS ESPECÍFICOS DE RECURSO
----------------------
O Azure Active Directory e os componentes de Autenticação Integrada (no Windows) estão incluídos 
no diretório “auth”.

Os componentes de transação distribuída do JDBC estão incluídos no diretório “xa”.


--------------------
DEPENDÊNCIAS DE RECURSO
--------------------
Alguns recursos no Microsoft JDBC Driver 8.4 para SQL Server dependem de bibliotecas externas 
como listado abaixo:

1. Usando “Always Encrypted” com o provedor do Azure Key Vault
   Bibliotecas dependentes: azure-keyvault (versão 1.2.4), adal4j (versão 1.6.5),
   e client-runtime (versão 1.7.4)

2. Usando 'Always Encrypted com enclaves seguros'
   Bibliotecas dependentes: com.google.code.gson (versão 2.8.6)
   e org.bouncycastle (versão 1.65). A org.bouncycastle só é necessária para o JDK 8.
 
3. Usando “Autenticação Integrada do Azure Active Directory” nos sistemas operacionais Windows, Linux e macOS
   Bibliotecas dependentes: adal4j (versão 1.6.5) e client-runtime (versão 1.7.4)
   
4. Usando 'useFmtOnly' para recuperar metadados de parâmetro
   Bibliotecas dependentes: antlr-runtime (versão 4.7.2)
   
Informações detalhadas sobre a inclusão dessas bibliotecas dependentes em um aplicativo Java padrão 
ou um aplicativo Maven podem ser encontradas aqui: https://go.microsoft.com/fwlink/?linkid=867575

-------
SAMPLES
-------
Os aplicativos de exemplo que demonstram vários recursos do driver JDBC estão incluídos no diretório
"samples". Para obter mais detalhes sobre cada exemplo e como executá-los, veja a documentação 
online.


-----------
LISTA DE ALTERAÇÕES
-----------
Alterações da versão 8.4.0.0 para a 8.4.1.0:
– Foi corrigido o problema de incompatibilidade de 'SQLServerConnectionPoolProxy' com 'delayLoadingLobs'.
– Foi corrigido um possível problema de 'NullPointerException' com 'delayLoadingLobs'.
– Foi corrigido o problema com a descriptografia de chaves de criptografia de coluna usando o Repositório de Certificados do Windows.

Alterações da 8.2.2.0 para a 8.4.0.0:
– Adicionada compatibilidade com a classificação de confidencialidade ao usar a Descoberta e a Classificação de Dados SQL.
– Adicionada a API 'SQLServerDatabaseMetaData.getDatabaseCompatibilityLevel()' para retornar ao nível de compatibilidade do banco de dados.
– Adicionada compatibilidade com o Cache DNS do SQL do Azure.
– Adicionada a opção de durabilidade atrasada para 'SQLServerConnection.commit()'.
– Adicionada a validação de vencimento do certificado ao usar o recurso Always Encrypted com enclaves seguros.
– Adicionado o Estado de SQL à Exceção quando a conexão é encerrada.
– Adicionadas as propriedades de conexão para especificar o SocketFactory personalizado.
– Adicionada compatibilidade com a Autenticação de Certificado do Cliente.
– Adicionado suporte a JAVA 14.
– Adicionada compatibilidade com a autenticação do Azure Key Vault por meio da Identidade Gerenciada.
– Atualização do driver para enviar um aviso quando uma versão do TLS inferior à 1.2 for negociada.
– Incluído o 'SQLServerBulkCSVFileRecord.setEscapeColumnDelimitersCSV()' para escapar os delimitadores e as aspas duplas ao usar a cópia em massa para carregar de arquivos CSV.
– Incluída compatibilidade com a cópia em massa estendida no Data Warehouse do Azure.
– Incluída a propriedade de conexão 'delayLoadingLobs' para oferecer compatibilidade com versões anteriores ao transmitir LOBs.

 Correções de bug: 
– Corrigido um problema em que 'DatabaseMetaData.getColumns()' retornava intermitentemente as descrições de coluna de tabela na ordem incorreta.
– Corrigido um problema em que os tipos de dados espaciais geravam erro quando o Always Encrypted estava habilitado.
– Corrigido um problema em que 'DatabaseMetaData.getColumns()' não retornava o tipo correto para IS_AUTOINCREMENT e IS_GENERATEDCOLUMN no Data Warehouse do Azure.
– Corrigido um problema em que 'Geography.STAsBinary()' e 'Geometry.STAsBinary()' retornavam o formato WKB em vez do CLR.
– Corrigido um problema que permitia ao ResultSets não MSSQL copiar em massa o 'DateTimeOffset'.
– Corrigidos problemas identificados por SonarQube.
– Corrigido um problema em que havia falha na inserção de lotes quando o Always Encrypted estava habilitado.
– Corrigido um problema em que havia falha na autenticação MSI por causa de uma incompatibilidade no formato da data de vencimento.
– Corrigido um problema em que os fluxos não eram encerrados ao usar o Always Encrypted com o recurso de enclaves seguros.
– Corrigido um problema com a recuperação de SQL VARIANT como o respectivo tipo subjacente.
– Corrigidos problemas em que o driver não estava em conformidade com o JAVA 8.
– Corrigido um problema com 'PreparedStatement' ao inserir tipos grandes de dados espaciais.
– Corrigido um problema com o escape de chaves na cadeia de conexão.
– Corrigido um aviso ao recuperar informações do Sistema Operacional do SQL Server Linux ao usar transações distribuídas.

Aprimoramentos:
– Atualizado 'SQLServerPreparedStatement.setObject()' para recuperar o nome TVP de 'SQLServerDataTable'.
– Aprimorada a mensagem de exceção ao se conectar com o servidor Azure habilitado para redirecionamento.
– Aprimorado o desempenho ao analisar a cadeia de conexão.
– Adicionado o nome do banco de dados para a chave de cache de enclave do Always Encrypted.
– Removido código não usado.

------------
PROBLEMAS CONHECIDOS
------------
Veja a seguir os problemas conhecidos com o Microsoft JDBC Driver 8.4 para SQL Server:

1) REMOÇÃO DE CONEXÕES COM O SQL DO AZURE

Ao se conectar ao SQL Azure, conexões ociosas podem ser finalizadas por um componente de rede (como um 
firewall) após um período de inatividade. Para evitar a remoção de conexões ociosas por um componente de rede, 
as seguintes configurações do registro (ou seus equivalentes não Windows) devem ser definidas no sistema 
operacional em que o driver foi carregado:
           
Configuração do Registro                                                                     Valor recomendado
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\KeepAliveTime            30000
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\KeepAliveInterval         1000
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\TcpMaxDataRetransmission  10

2) QUANDO USAR TVP COM SQL_VARIANT 

2.a) PARA VALORES DE DATA

Ao usar TVP para popular uma tabela que contém os valores datetime/smalldatetime/date armazenados na coluna sql_variant, 
chamar getDateTime()/getSmallDateTime()/getDate() em ResultSet não funciona e gera a seguinte exceção:

	Não é possível converter java.lang.String em java.sql.Timestamp

Solução alternativa: use getString() ou getObject().

2.b) USANDO TVP COM SQL_VARIANT PARA VALORES NULL

Se você estiver usando um TVP para popular uma tabela e enviar um valor NULL para o tipo de coluna sql_variant, encontrará
uma exceção, uma vez que a inserção do valor NULL com o tipo de coluna sql_Variant no TVP não é compatível no momento.


3) AO USAR A AUTENTICAÇÃO NTLM

No momento, não é possível habilitar a Proteção Estendida e as conexões criptografadas ao mesmo tempo.

4) AO USAR useFmtOnly

Há alguns problemas com o recurso, causados por deficiências na lógica de análise do SQL.
Confira https://aka.ms/mssql-jdbc-usefmtonly para saber mais detalhes e sugestões de soluções alternativas.